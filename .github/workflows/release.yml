name: Release

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: false

  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # https://github.com/actions/virtual-environments#available-environments
        os: [ubuntu-latest, windows-latest, macos-10.15] 
        include:
          # Target oldest Xcode available, in oldest available macos runner, for widest OS support
          # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#xcode
          - os: macos-10.15 
            xcode: '10.3' # Supports macOS Mojave onwards

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
        modules: 'qtcharts'
        tools: 'desktop,tools_ifw,""'
        aqtversion: '==2.0.0'

    - name: MSVC Environment Setup
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Xcode Environment Setup
      if: runner.os == 'macOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}

    - name: Xcode Command Line Tools Setup
      if: runner.os == 'macOS'
      run: sudo xcode-select --switch /Library/Developer/CommandLineTools

    - name: Create Makefile
      run: qmake

    - name: Build (nmake)
      if: runner.os == 'Windows'
      run: nmake

    - name: Build (make)
      if: runner.os != 'Windows'
      run: make

    - name: Installer
      shell: pwsh
      run: |
          $qtifw = (Get-ChildItem -Path "$Env:IQTA_TOOLS\QtInstallerFramework" -Directory).FullName
          ./installer/createInstaller.ps1 "$qtifw"

    - name: Locate Release Asset
      shell: pwsh
      run: |
            $FullName = (Get-ChildItem -Path ".\installer\OTPView*" -File).FullName
            $Name = (Get-ChildItem -Path ".\installer\OTPView*" -File).Name
            Add-Content -Path $env:GITHUB_ENV -Value "ASSET_PATH=$FullName"
            Add-Content -Path $env:GITHUB_ENV -Value "ASSET_NAME=$Name"

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream

name: Release

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
        modules: 'qtcharts'
        tools: 'desktop,tools_ifw,""'
        aqtversion: '==2.0.0'

    - name: MSVC Environment Setup
      uses: ilammy/msvc-dev-cmd@v1

    - name: Create Makefile
      run: qmake

    - name: Build
      run: nmake
      
    - name: Installer
      run: |
          $qtifw = (Get-ChildItem -Path "$Env:IQTA_TOOLS\QtInstallerFramework" -Directory).FullName
          installer\createInstaller.ps1 "$qtifw/bin" "$Env:Qt5_DIR/bin"
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./installer/OTPView ${{ github.ref_name }}.exe"
        asset_name: "OTPView ${{ github.ref_name }}.exe"
        asset_content_type: application/octet-stream
